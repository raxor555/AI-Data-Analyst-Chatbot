{
  "name": "AI Sales Agent",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.body }}",
        "options": {
          "systemMessage": "=You are a helpful assistant.\nCurrent timestamp is {{ $now }}",
          "maxIterations": 15
        }
      },
      "id": "e23a9782-5c7f-4738-8b10-0f27b1d1582a",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        260,
        260
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {},
      "id": "9b71bd99-997e-4fe4-8819-93a2e619bbf2",
      "name": "Calculator",
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "position": [
        860,
        660
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Ensure there's at least one input item.\nif (!items || items.length === 0) {\n  throw new Error(\"No input items found.\");\n}\n\n// Our input is expected to have a 'data' property containing the JSONP string.\nconst input = items[0].json;\n\nif (!input.data) {\n  throw new Error(\"Input JSON does not have a 'data' property.\");\n}\n\nconst rawData = input.data;\n\n// Use a regex to extract the JSON content from the Google Visualization JSONP response.\nconst regex = /google\\.visualization\\.Query\\.setResponse\\((.*)\\);?$/s;\nconst match = rawData.match(regex);\n\nif (!match) {\n  throw new Error(\"Input data does not match the expected Google Visualization JSONP format.\");\n}\n\nconst jsonString = match[1];\n\n// Parse the extracted JSON string.\nlet parsed;\ntry {\n  parsed = JSON.parse(jsonString);\n} catch (error) {\n  throw new Error(\"Failed to parse JSON: \" + error.message);\n}\n\n// Verify that the parsed JSON has the expected 'table' structure with 'cols' and 'rows'.\nif (!parsed.table || !Array.isArray(parsed.table.cols) || !Array.isArray(parsed.table.rows)) {\n  throw new Error(\"Parsed JSON does not have the expected 'table' structure with 'cols' and 'rows'.\");\n}\n\nconst cols = parsed.table.cols;\nconst rows = parsed.table.rows;\n\n// Helper function to convert date string from \"Date(YYYY,M,D)\" to \"YYYY-MM-DD\"\nfunction formatDate(dateStr) {\n  const match = dateStr.match(/^Date\\((\\d+),(\\d+),(\\d+)\\)$/);\n  if (!match) return dateStr;\n  const year = parseInt(match[1], 10);\n  const month = parseInt(match[2], 10) + 1; // JavaScript months are 0-indexed\n  const day = parseInt(match[3], 10);\n  // Format with leading zeros\n  return `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\n}\n\n// Map each row into an object using the column labels as keys.\nconst newItems = rows.map(row => {\n  const obj = {};\n  cols.forEach((col, index) => {\n    let value = row.c && row.c[index] ? row.c[index].v : null;\n    // If the column type is \"date\" and the value is a string that looks like \"Date(YYYY,M,D)\"\n    if (col.type === \"date\" && typeof value === \"string\") {\n      value = formatDate(value);\n    }\n    obj[col.label] = value;\n  });\n  return { json: obj };\n});\n\n// Return the new array of items.\nreturn newItems;\n"
      },
      "id": "21aef4a6-475e-4bfa-b22a-240746b2fb82",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "position": [
        640,
        1240
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "start_date"
            },
            {
              "name": "end_date"
            },
            {
              "name": "status"
            }
          ]
        }
      },
      "id": "cabe0913-f17a-4f25-a4c6-e4e947789029",
      "name": "When Executed by Another Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        80,
        1240
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "name": "records_by_date_and_or_status",
        "description": "Use this tool to get records filtered by date. You can also filter by status at the same time, if you want.",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "a2BIIjr2gLBay06M",
          "cachedResultName": "Template | Your first AI Data Analyst"
        },
        "workflowInputs": {
          "value": {
            "status": "={{ $fromAI(\"status\", \"Status of the transaction. Can be Completed, Refund or Error. Leave empty if you don't need this now.\", \"string\") }}",
            "end_date": "={{ $fromAI(\"end_date\", \"End date in format YYYY-MM-DD\", \"string\") }}",
            "start_date": "={{ $fromAI(\"start_date\", \"Start date in format YYYY-MM-DD\", \"string\") }}"
          },
          "schema": [
            {
              "id": "start_date",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "start_date",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "end_date",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "end_date",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "status",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "status",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "id": "c0884f77-dbd1-4162-bf4c-37cfd5605c18",
      "name": "Records by date",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        1040,
        480
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "74c9ab17-f3eb-4c3d-8adf-30fc79f1215d",
      "name": "Aggregate",
      "type": "n8n-nodes-base.aggregate",
      "position": [
        1080,
        1240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "To send all the items back to the AI, we need to finish with everything aggregated into one single item.\n\nOtherwise it will respond with one item at a time, and the AI will only get the first item that arrives.",
        "height": 400,
        "width": 220,
        "color": 7
      },
      "id": "eca12a8a-d5b3-43dd-b5f9-fac7ffbff4fe",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1020,
        1000
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "This node sends a custom HTTP Request to the Google Sheets API.\n\nFiltering by date range in the Google Sheets API is very complicated.\n\nThis node solves that problem.\n\nBut doing the same in a database is much simpler. A tool could do it without needing a sub-workflow.",
        "height": 400,
        "width": 300,
        "color": 7
      },
      "id": "3b0ad307-8638-4b89-aea7-a70f52549732",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        260,
        1000
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "The output from this complex request is also messy.\n\nSo we use some code generated by ChatGPT to transform the data into JSON objects.",
        "height": 400,
        "width": 220,
        "color": 7
      },
      "id": "f1951582-c7cc-481d-8411-c30dcaa19bbe",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        580,
        1000
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "url": "https://docs.google.com/spreadsheets/d/14_e5wDGux36Z-ApSOk76D8iS0wUtoUlIRieV9NuvYkE/edit?gid=0#gid=0",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleSheetsOAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "sheet",
              "value": "Sheet1"
            },
            {
              "name": "tq",
              "value": "=SELECT * WHERE A >= DATE \"{{ $json.start_date }}\" AND A <= DATE \"{{ $json.end_date }}\""
            }
          ]
        },
        "options": {}
      },
      "id": "046b6052-a3d6-4e65-a4b9-4e31c56089b6",
      "name": "Google Sheets request",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        360,
        1240
      ],
      "typeVersion": 4.2,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "SDzJ5cU6EfTyJGZv",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Find transactions by product.\nOur products are:\n- Widget A\n- Widget B\n- Widget C\n- Widget D",
        "documentId": {
          "__rl": true,
          "value": "14_e5wDGux36Z-ApSOk76D8iS0wUtoUlIRieV9NuvYkE",
          "mode": "list",
          "cachedResultName": "Sales Data",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/14_e5wDGux36Z-ApSOk76D8iS0wUtoUlIRieV9NuvYkE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": "gid=0",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/18A4d7KYrk8-uEMbu7shoQe_UIzmbTLV1FMN43bjA7qc/edit#gid=0",
          "cachedResultName": "Sheet1"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Product",
              "lookupValue": "={{ $fromAI(\"product_name\", \"The product name\", \"string\") }}"
            }
          ]
        },
        "options": {}
      },
      "id": "206c75b7-51a7-4ec7-8d7e-257bc44c8833",
      "name": "Get transactions by product name",
      "type": "n8n-nodes-base.googleSheetsTool",
      "position": [
        1040,
        280
      ],
      "typeVersion": 4.5,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "SDzJ5cU6EfTyJGZv",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Only use this as last resort, because it will pull all data at once.",
        "documentId": {
          "__rl": true,
          "value": "14_e5wDGux36Z-ApSOk76D8iS0wUtoUlIRieV9NuvYkE",
          "mode": "list",
          "cachedResultName": "Sales Data",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/14_e5wDGux36Z-ApSOk76D8iS0wUtoUlIRieV9NuvYkE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/14_e5wDGux36Z-ApSOk76D8iS0wUtoUlIRieV9NuvYkE/edit#gid=0"
        },
        "options": {}
      },
      "id": "925677d7-7857-42ac-926f-6b676820ae46",
      "name": "Get all transactions",
      "type": "n8n-nodes-base.googleSheetsTool",
      "position": [
        860,
        480
      ],
      "typeVersion": 4.5,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "SDzJ5cU6EfTyJGZv",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Some questions to try\nThere's a red button on this page that you can click to chat with the AI.\n\nTry asking it these questions:\n\n- How many refunds in January and what was the amount refunded?\n\n- How many successful sales did we have in January 2025 and what was the final income of those?\n\n- What is the most frequent reason for refunds?",
        "height": 340,
        "width": 320,
        "color": 4
      },
      "id": "4a1785b7-97d9-48c5-8101-356d4cb6d92f",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -320,
        440
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Webhook').item.json.body }}"
      },
      "id": "f9fbf47b-0e84-449a-bbe1-533e85665452",
      "name": "Buffer Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        380,
        500
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "content": "# Sub-workflow\nThe AI can call this sub-workflow anytime,\nby using the **Records by date** tool.\n\nThe sub-workflow automatically return\n the result of the last executed node to the AI.",
        "height": 520,
        "width": 1380,
        "color": 7
      },
      "id": "ed78dc30-92b4-4371-8a64-57c0bf6d14a8",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -80,
        940
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "e50da873-bbbd-41d3-a418-83193907977c",
              "operator": {
                "type": "string",
                "operation": "contains"
              },
              "leftValue": "={{ $json.Status }}",
              "rightValue": "={{ $('When Executed by Another Workflow').item.json.status }}"
            }
          ]
        },
        "options": {}
      },
      "id": "ec04f9d8-acf8-449b-84b9-ab0807628167",
      "name": "Filter by status",
      "type": "n8n-nodes-base.filter",
      "position": [
        860,
        1240
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Find transactions by status",
        "documentId": {
          "__rl": true,
          "value": "14_e5wDGux36Z-ApSOk76D8iS0wUtoUlIRieV9NuvYkE",
          "mode": "list",
          "cachedResultName": "Sales Data",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/14_e5wDGux36Z-ApSOk76D8iS0wUtoUlIRieV9NuvYkE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/14_e5wDGux36Z-ApSOk76D8iS0wUtoUlIRieV9NuvYkE/edit#gid=0"
        },
        "options": {}
      },
      "id": "3980f99b-567b-4478-858c-54ebbc41d13b",
      "name": "Get transactions by status",
      "type": "n8n-nodes-base.googleSheetsTool",
      "position": [
        860,
        280
      ],
      "typeVersion": 4.5,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "SDzJ5cU6EfTyJGZv",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        180,
        480
      ],
      "id": "364c2ba1-c715-4cb4-a2f5-ebb0840a9ac3",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "OncmBr9ZraByqddq",
          "name": "OpenRouter account 3"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "3625c6c4-63f4-4f5c-8d1c-8355b1384cbd",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        40,
        260
      ],
      "id": "82db689e-d46a-4bc2-aaf2-3bb819134988",
      "name": "Webhook",
      "webhookId": "3625c6c4-63f4-4f5c-8d1c-8355b1384cbd"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.output }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        620,
        260
      ],
      "id": "2f932dd0-5026-4dee-b676-f4cd32293e79",
      "name": "Respond to Webhook"
    }
  ],
  "pinData": {},
  "connections": {
    "Code": {
      "main": [
        [
          {
            "node": "Filter by status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Records by date": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Filter by status": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get all transactions": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get transactions by status": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get transactions by product name": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Google Sheets request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e34746d6-f39d-436e-8b52-6e938a4bf9a1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "afba0edf3025714e439d0d9a7fd00d512e4a26a7efb5d6c437ef546a6da683a9"
  },
  "id": "JhTPxS53HWpvnxhc",
  "tags": []
}